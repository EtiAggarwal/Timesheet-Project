lapply(new,function(x) sapply(x, function(y)y))
lapply(new,function(x) x/thing)
thing
lapply(new,function(x) x/thing)
lapply(new,function(x) x)
rotate <- function(x) t(apply(x, 2, rev))
lapply(rotate(new),function(x) x)
rotate(new)
other=rotate(new)
lapply(other,function(x) x)
lapply(rotate(new),function(x) x)
lapply(new,function(x) x)
mapply(new,function(x) x)
apply(new,1,function(x) x)
apply(new,1,function(x) x/thing)
percentages=apply(new,1,function(x) x/thing)
plot(percentages)
plot(x=percentages)
percentages
percentages=matrix(apply(new,1,function(x) x/thing))
percentages
percentages=as.matrix(apply(new,1,function(x) x/thing))
percentages
percentages=as.data.frame(apply(new,1,function(x) x/thing))
percentages
percentages=mbind(apply(new,1,function(x) x/thing))
percentages
percentages=rbind(apply(new,1,function(x) x/thing))
percentages
percentages
output <- matrix(unlist(percentages), ncol = 10, byrow = TRUE)
output <- matrix(unlist(percentages), ncol = 7 , byrow = TRUE)
percentages
output
plot(output)
apply(new ,1, function(x) Reduce(x))
lapply(new ,1, function(x) Reduce(x))
lapply(new , function(x) Reduce(x))
sapply(new , function(x) Reduce(x))
sapply(new , function(x) Reduce("+",x))
apply(new,1 , function(x) Reduce("+",x))
pmf <- function(total, choice, probs){
return (choose(total,choice)*(probs)^choice *(1.0-probs)^(total-choice));
}
cdf <- function(total, chooseList, probs){
return(sum(sapply(chooseList,function(x) pmf(total,x,probs))))
}
pmf(n,p,x)
pmf(10,1/2,1)
pmf(10,1,1/2)
pmf(10,1,1/2)== 10/1024
pmf(100,10,.05)
b <- function(x,n,p){
return (choose(n,x)*p^n * (1-p)*(n-x))
}
b(90,100,0.95)
return (choose(n,x)*p^n * (1-p)^(n-x))
b <- function(x,n,p){
return (choose(n,x)*p^n * (1-p)^(n-x))
}
b(90,100,0.95)
b(10,100,0.05)
b <- function(x,n,p){
return (choose(n,x)*p^x * (1-p)^(x-n))
}
b(90,100,0.95)
b(10,100,0.05)
b <- function(x,n,p){
return (choose(n,x)*p^x * (1-p)^(n-x))
}
b(90,100,0.95)
b(10,100,0.05)
b(90,100,0.95)
b(10,100,0.05)
pmf(100,10,.05)
cdf(100,0:10,rep(0.05,11))
cdf(100,0:10,0.05)
cdf(25,0:10,0.05)
cdf(25,0:1,0.05)
b(2,25,0.05)
b(2,25,0.05)-b(1,25,0.05)
b(2,25,0.05)
b(1,25,0.05)
cdf(25,0:2,0.05)-cdf(25,0:1,0.05)
cdf(25,0:2,0.05)-cdf(25,0:1,0.05)==cdf(25,2,0.05)
cdf(25,2,0.05)
cdf(25,0:2,0.05)-cdf(25,0:1,0.05)
setwd("/Users/stephenkinser/mtsu-makers/sustainability-project/MakersSite")
my_db<- src_sqlite("db.sqlite3", create= F)
my_db
setwd("/Users/stephenkinser/mtsu-makers/sustainability-project/MakersSite")
my_db<- src_sqlite("db.sqlite3", create= F)
rm(list=ls())
#library("quantmod")
#library("RSQLite") #you'd think this would be the one
#library("RMySQL")
library("dplyr")
library("ggplot2")
setwd("/Users/stephenkinser/mtsu-makers/sustainability-project/MakersSite")
my_db<- src_sqlite("db.sqlite3", create= F)
my_db
tempHumidity<- tbl(my_db, "tempHumidity_temphumidity")
localtemp=tempHumidity%>%
select( temperature, humidity, date_rec)%>%
filter(date_rec >= Date("2015-08-24 20:00:23.220000"))%>%
collect()
localtemp$time=strftime(localtemp$date_rec, format="%H:%M:%S")
localtemp$date_rec=as.Date(localtemp$date_rec)
ggplot(aes(y=humidity, x=time),data = localtemp)+geom_point()+facet_wrap(~date_rec)
ggplot(aes(y=temperature, x=as.Date(date_rec)),data = localtemp)+geom_point()
ggplot(aes(y=temperature, x=as.Date(date_rec)),data = localtemp)+geom_point()
ggplot(aes(y=humidity, x=as.Date(date_rec)),data = localtemp)+geom_point()
ggplot(aes(y=temperature, x=as.Date(date_rec)),data = localtemp)+geom_point()
ggplot(aes(y=humidity, x=as.Date(date_rec)),data = localtemp)+geom_point()
ggplot(aes(y=temperature, x=time),data = localtemp)+geom_point()+facet_wrap(~date_rec)
setwd("/Users/stephenkinser")
read.csv("ststs.csv")
read.csv("stats.csv")
eden=read.csv("stats.csv")
mean(eden)
mean(eden[,1])
mean(eden[,])
mean(eden$heur..0.B)
mean(eden$heur..0.B, rm.na=T)
mean(eden$heur..0.B, na.rm=T)
mean(eden$, na.rm=T)
mean(eden, na.rm=T)
apply(eden,0,function(x) mean(x,na.rm=T))
apply(eden,1,function(x) mean(x,na.rm=T))
sapply(eden,function(x) mean(x,na.rm=T))
summary(eden)
library("ggplot2")
setwd("/Users/stephenkinser")
eden=read.csv("stats.csv")
mean(eden$heur..0.B, na.rm=T)
summary(eden)
ggplot(aes(),data=eden)
ggplot(aes(),data=eden)+geom_point()
ggplot(data=eden)+geom_point()
summary(eden)
eden
ggplot(data=eden)+geom_point(aes(x=heur..0.B,y=seq_along(heur..0.B))
ggplot(data=eden)+geom_point(aes(x=heur..0.B,y=seq_along(heur..0.B))
ggplot(data=eden)+geom_point(aes(x=heur..0.B,y=seq_along(heur..0.B))
ggplot(data=eden)+geom_point(aes(x=heur..0.B,y=seq_along(heur..0.B)))
ggplot(data=eden)+geom_point(aes(x=heur..0.B,y=seq_along(heur..0.B)))
summary(eden)
ggplot(data=eden)+geom_point(aes(x=heur..0.B,y=seq_along(heur..0.B)))
+geom_point(aes(x=heur...1,y=seq_along(heur..0.B)))
ggplot(data=eden)+geom_point(aes(x=heur..0.B,y=seq_along(heur..0.B),colors="red"))
+geom_point(aes(x=heur...1,y=seq_along(heur...1)colors="blue"))
ggplot(data=eden)+geom_point(aes(x=heur..0.B,y=seq_along(heur..0.B),colors="red"))
+geom_point(aes(x=heur...1,y=seq_along(heur...1),colors="blue"))
ggplot(data=eden)#+geom_point(aes(x=heur..0.B,y=seq_along(heur..0.B),colors="red"))
+geom_point(aes(x=heur...1,y=seq_along(heur...1),colors="blue"))
ggplot(data=eden)+geom_point(aes(x=heur...1,y=seq_along(heur...1),colors="blue"))
e
output: LaTeX
fxu= function(x,mu){
return (2.78^-mu* mu ^x/ factorial(x))
}
fxu(4,15)
tuneup[1:2]
tuneup= c(.45,.40,.15)
engine= c(4,6,8)
tuneup[1:2]
print(sum(tuneup[1:2]))
sprintf("least six cylinders %f",sum(tuneup[1:2]))
sprintf("least six cylinders %f",sum(tuneup[2]))
sprintf("{at most three lines are in use} %f",sum(probs[0:4]))
probs=c(.10,.15,.20,.25, .20,.06,.04)
sprintf("{at most three lines are in use} %f",sum(probs[0:4]))
sprintf("{fewer than three lines are in use} %f",sum(probs[1:3]))
sprintf(" {between two and five lines, inclusive, are in use}", sum(probs[3:6]))
sprintf(" {between two and five lines, inclusive, are in use}", sum(probs[3:6]))
sprintf(" {between two and five lines, inclusive, are in use} %f", sum(probs[3:6]))
sprintf(" {between two and four lines, inclusive, are not in use} %f", sum(probs[3:5]))
sprintf(" {at least four lines are not in use} %f", sum(probs[1:4]))
pairs=matrix(unique(apply(combn(rep(c("1","2"),3),3 ),2, function(x)paste(x,collapse=''))))
print(pairs)
pairs=matrix(unique(apply(combn(rep(c("1","2"),5),3 ),2, function(x)paste(x,collapse=''))))
print(pairs)
pairs=matrix(unique(apply(combn(rep(c("1","2"),3),5 ),2, function(x)paste(x,collapse=''))))
print(pairs)
pairs=matrix(unique(apply(combn(rep(c("1","2"),5),5 ),2, function(x)paste(x,collapse=''))))
print(pairs)
probs <-function(inpt){
if(inpt=="S"){
return (1)
}
else{
return(0)
}
}
sapply(sample(cars,5), function(x)strsplit(x,""))
sapply(pairs, function(x)strsplit(x,""))
lapply(sapply(pairs, function(x)strsplit(x,"")) function(y){y[1,1]=="2", y[1,2]=="2" })
lapply(sapply(pairs, function(x)strsplit(x,"")), function(y){y[1,1]=="2", y[1,2]=="2" })
lapply(sapply(pairs, function(x)strsplit(x,"")), function(y){y[1,1]=="2", y[1,2]=="2" })
lapply(sapply(pairs, function(x)strsplit(x,"")), function(y){y[1,1]=="2"&& y[1,2]=="2" })
lapply(sapply(pairs, function(x)strsplit(x,"")), function(y){y[1]=="2"&& y[2]=="2" })
lapply(sapply(pairs, function(x)strsplit(x,"")), function(y){y[1]=="2"&& y[2]=="2"&&y[3:5]!="2" })
table(lapply(sapply(pairs, function(x)strsplit(x,"")), function(y){y[1]=="2"&& y[2]=="2"&&y[3:5]!="2" }))
proposition=lapply(sapply(pairs, function(x)strsplit(x,"")), function(y){y[1]=="2"&& y[2]=="2"&&y[3:5]!="2" })
table(proposition)
table(matrix(proposition))
matrix(proposition)
table(matrix(proposition))
count(matrix(proposition)==T)
matrix(proposition)
rowSums(matrix(proposition)==T)
sum(rowSums(matrix(proposition)==T))
sum(rowSums(matrix(proposition)==T))/length(matrix(proposition))
propProb=sum(rowSums(matrix(proposition)==T))/length(matrix(proposition))
rbind(c(propProb, 1-probProb, 0), c("True", "False", "otherwise"))
rbind(c(propProb, 1-propProb, 0), c("True", "False", "otherwise"))
table(rbind(c(propProb, 1-propProb, 0), c("True", "False", "otherwise")))
rbind(c(propProb, 1-propProb, 0), c("True", "False", "otherwise"))
print(rbind(c(propProb, 1-propProb, 0), c("True", "False", "otherwise")))
matrix(unique(apply(combn(rep(c("1","2"),6),2 ),2, function(x)paste(x,collapse=''))))
matrix(unique(apply(combn(rep(c("1","2"),2),6 ),2, function(x)paste(x,collapse=''))))
matrix(unique(apply(combn(rep(c("1","2"),6),2 ),2, function(x)paste(x,collapse=''))))
matrix(unique(apply(combn(rep(c("1","2"),6),6 ),2, function(x)paste(x,collapse=''))))
matrix(unique(apply(combn(rep(c("1","2"),6),2 ),2, function(x)paste(x,collapse=''))))
matrix(unique(apply(combn(rep(c("1","2"),6),2 ),6, function(x)paste(x,collapse=''))))
matrix(unique(apply(combn(rep(c("1","2"),2),6 ),6, function(x)paste(x,collapse=''))))
6
matrix(unique(apply(combn(rep(c("1","2"),6),6 ),6, function(x)paste(x,collapse=''))))
matrix(unique(apply(combn(rep(c("1","2"),6),6 ),2, function(x)paste(x,collapse=''))))
matrix(unique(apply(combn(rep(c(1:6"),2),2 ),2, function(x)paste(x,collapse=''))))
matrix(unique(apply(combn(rep(c(1:6),2),2 ),2, function(x)paste(x,collapse=''))))
matrix(unique(apply(combn(rep(c(1:6),2),2 ),2, function(x)paste(x,collapse=''))))
#23. A consumer organization that evaluates new automobiles customarily reports the number of major defects in each car examined. Let X denote the number of major defects in a randomly selected car of a certain type. The cdf of X is as follows:
matrix(unique(apply(combn(rep([1:6],2),2 ),2, function(x)paste(x,collapse=''))))
matrix(unique(apply(combn(rep(c(1:6),2),2 ),2, function(x)paste(x,collapse=''))))
)
)
)
)
)
)
)
matrix(unique(apply(combn(rep(c(1,2,3,4,5,6),2),2 ),2, function(x)paste(x,collapse=''))))
matrix(unique(apply(combn(rep(c(1,2,3,4,5,6),2),2 ),2, function(x)paste(x,collapse=''))))
m=matrix(unique(apply(combn(rep(c(1,2,3,4,5,6),2),2 ),2, function(x)paste(x,collapse=''))))
1/6
ontoss=1/6
onetoss=1/6
plot(rep(onetoss,6))
c(0,0.06, 0.19,.39,.67,.92,.97,1)
0:6
fx=c(0,0.06, 0.19,.39,.67,.92,.97,1)
x=0:6
print(fx[3:7])
print(fx[3])
print(fx[5]-fx[4])
fx[6]
print(fx[7]-fx[6]-fx[3])
print(fx[6]-fx[3])
print(fx[7]-fx[4])
memory=c(.05,.10,.35,.40,.10)
mem=c(1,2,4,8,16)
memory*mem
sum(memory*mem)
expectedVariance<- function(numlist, probslist){
return( sum(((numlist-expectedValue(numlist, probslist))^2)*probslist));
}
print(expectedVariance(mem, memory))
expectedValue<- function(numlist, probslist){
return(sum(numlist*probslist));
}
print(expectedVariance(mem, memory))
print(sqrt(expectedVariance(mem, memory)))
y=c(0,1,2,3)
py=c(.60,.25,.10,.05)
y=c(0,1,2,3)
py=c(.60,.25,.10,.05)
print(expectedValue(y,py))
print(expectedValue(y,100*py^2))
100*py^2
print(expectedValue(y^2,100*py))
x=c(13.5,15.9,19.1)
px=c(.2,.5,.3)
x=c(13.5,15.9,19.1)
px=c(.2,.5,.3)
print(expectedValue(x))
print(expectedValue(x,px))
print(expectedValue(x^2,px))
print(expectedVariance(x^2,px))
print(expectedVariance(x,px))
print(expectedValue(25*x-8.5,px))
print(expectedVariance(25*x-8.5,px))
print(expectedVariance(x- 0.01*x^2,px))
print(expectedValue(x- 0.01*x^2,px))
px=c(1/15,2/15,3/15,4/15,3/15,2/15)
x=1:6
sum(px)
expectedValue(2x,px)
expectedValue(2*x,px)
px*2
px*x
(px*x)[3]
(px*x)[3]*2
sales=(px*x)[3]*2
three=(px*x)[3]*2
three=(px)[3]*2
three
*x
three=(px*x)[3]*2
three
four=(px)[4]*4-(px*x)[4]*2
four
four=(px)[4]*4-(1-(px*x))[4]*2
four
pnorm(8,mean=5)
ppois(8, lambda = 5)
ppois(9, lambda = 5,lower.tail = F)
ppois(8, lambda = 5)-ppois(5, lambda = 5)
ppois(8, lambda = 5)-ppois(7, lambda = 5)
(ppois(8, lambda = 5)-ppois(7, lambda = 5)) -(ppois(5, lambda = 5) - ppois(4, lambda = 5))
(ppois(8, lambda = 5)-ppois(7, lambda = 5))
(ppois(5, lambda = 5) - ppois(4, lambda = 5))
ppois(8, lambda = 5)-ppois(5, lambda = 5)
ppois(9, lambda = 5,lower.tail = F)
ppois(9, lambda = 5,lower.tail = F)
(ppois(8, lambda = 5, lower.tail = F)-ppois(7, lambda = 5, lower.tail = F)) -(ppois(5, lambda = 5) - ppois(4, lambda = 5))
(ppois(8, lambda = 5, lower.tail = F)-ppois(7, lambda = 5, lower.tail = F))
(ppois(8, lambda = 5, lower.tail = F)-ppois(9, lambda = 5, lower.tail = F)) -(ppois(5, lambda = 5) - ppois(4, lambda = 5))
ppois(4, lambda = 4)
dpois(5:8, lambda = 5)
dpois(6:7, lambda = 5)
sum(dpois(6:7, lambda = 5))
sum(dpois(5:8, lambda = 5))
ppois(3, lambda = 4)
sum(dpois(4:8, lambda = 4))
ppois(4, lambda = 4, lower.tail = F)
ppois(4, lambda = 4)
ppois(8, lambda = 4, lower.tail = T)
ppois(8, lambda = 4, lower.tail = F)
dpois(1:8, lambda = 4)
dpois(1:8, lambda = 4)*(1:8)
expectedVariance(1:8,dpois(1:8, lambda = 4) )
stdv=sqrt(expectedVariance(1:8,dpois(1:8, lambda = 4) ))
expectedValue(1:8,dpois(1:8, lambda = 4) )
stdv=sqrt(expectedVariance(0:8,dpois(0:8, lambda = 4) ))
expectedValue(0:8,dpois(0:8, lambda = 4))
stdv=sqrt(expectedVariance(0:8,dpois(0:8, lambda = 4) ))
expectedValue(0:8,dpois(0:8, lambda = 4))
expectedValue(0:8,dpois(0:8, lambda = 4))+stdv
highest=expectedValue(0:8,dpois(0:8, lambda = 4))+stdv
ppois(highest, lambda=4)
ppois(10, m=20)
ppois(10, lambda = =20)
ppois(10, lambda = 20)
ppois(20, lambda = 20, lower.tail = F)
sum(dpois(10:20, lambda = 20))
sum(dpois(11:19, lambda = 20))
pmf <- function(total, choice, probs){
return (choose(total,choice)*(probs)^choice *(1.0-probs)^(total-choice));
}
pmf <- function(total, choice, probs){
return (choose(total,choice)*(probs)^choice *(1.0-probs)^(total-choice));
}
pmf(10,4,.4)
pmf(10,3,.4)
pmf(10,3:10,.4)
sum(pmf(10,3:10,.4))
pmf(10,1:10,.4)
1:10*pmf(10,1:10,.4)
sum(1:10*pmf(10,1:10,.4))
pnorm(85,8,2)
pnorm(85,mean=8,sd=2)
pnorm(85,mean=8,sd=2, lower.tail = F)
dnorm(x)
dnorm(1)
dnorm(.85)
dnorm(.85, mean = 8)
dnorm(.85, mean = 8, sd=2)
dnorm(85, mean = 8, sd=2)
dnorm(.85, mean = 8, sd=2)
dnorm(.85, mean = 8, sd=2, lower.tail=F)
dnorm(.85, mean = 8, sd=2)
.10 + (.90 * .20 * .50) + (.90 * .20 * .50) +(.90 * .80 * .50)
.10 + (.90 * .20 * .50) + (.90 * .20 * .50) +(.90 * .80 * .50) +(.90 * .80 * .50 *.80)
.10 + (.90 * .20 * .50) + (.90 * .20 * .50) +(.90 * .80 * .50) +(.90 * .80 * .50 *.20)
(.90 * .80 * .50 *.20)
.10 + (.90 * .20 * .50) + (.90 * .20 * .50) +(.90 * .80 * .50) +(.90 * .80 * .50 *.20)
(.90 * .20 * .50)
(.90 * .20 * .50)
(.90 * .80 * .50)
.9*.9*.9
(.90 * .80 * .50 *.20)
(.90 * .80 * .50 *.20)
.10 + (.90 * .20 * .50) + (.90 * .20 * .50) +(.90 * .80 * .50) +(.90 * .80 * .50 *.20)
E=  .10 + (.90 * .20 * .50) + (.90 * .20 * .50) +(.90 * .80 * .50) +(.90 * .80 * .50 *.20)
(.90 * .80 * .50 *.20)/E
(.90 * .20 * .50)*2/E
(.90 * .80 * .50 *.20)/E
(.90 * .20 * .50)*2/E
choose(8,3)
bxnp <- function(x,n,p){
return(choose(n,x)*p^x*(1-p)^x)
}
print(bxnp(3,.8,.35))
print(bxnp(3,8,.35))
print(bxnp(5,8,.6))
sum(bxnp(3:5,7,.6))
sum(bxnp(0:1,n,.1 ))
sum(bxnp(0:1,9 ,.1 ))
sum(bxnp(1:9,9,.1 ))
print(sum(bxnp(2:4, 15,.3)))
print(sum(bxnp(0:1, 15,.7)))
print(sum(bxnp(1:6, 15,.3)))
print(bxnp(6,1,.10))
print(bxnp(1,6,.10))
print(sum(bxnp(2:6,6,.10)))
print(sum(bxnp(4:5,6,.10)))
bxnp(0:15,15,.80)
sapply(0:15, function(x) bxnp(0:x,15,.80))
sapply(0:15, function(x) sum(bxnp(0:x,15,.80)))
(.90 * .80 * .50 *.20)/E
(.90 * .20 * .50)*2/E
rm(list = ls())
setwd("/Users/stephenkinser/Timesheet-Project/suggestedGraphTypes")
library("XML")
library(ggplot2)
library(gridSVG)
mydata = read.csv("jira-cleaner.csv")
mydata$Updated=strptime(as.character(mydata$Updated) , "%m/%d/%y %H:%M")
mydata$Updated=strptime(as.character(mydata$Updated) , "%m/%d/%y")
View(mydata)
mydata = read.csv("jira-cleaner.csv")
mydata$Updated=strptime(as.character(mydata$Updated) , "%m/%d/%y %H:%M")
format(mydata ,"%m/%d/%y")
format(mydata ,"%m/%d/%y")
format(mydata$Updated ,"%m/%d/%y")
mydata$days=format(mydata$Updated ,"%m/%d/%y")
mytable=with(subset(mydata, as.character(Assignee)!= "Unassigned"),table(Updated,Assignee,Project))
mytable=with(subset(mydata, as.character(Assignee)!= "Unassigned"),table(Updated,Assignee,Project))
with(subset(mydata, as.character(Assignee)!= "Unassigned"),table(Updated))
with(subset(mydata, as.character(Assignee)!= "Unassigned"),table(days))
mytable=with(subset(mydata, as.character(Assignee)!= "Unassigned"),table(days,Assignee,Project))
finalcsv =subset(as.data.frame(mytable),Freq !=0)
write.csv(finalcsv, file= "freq.csv")
with(subset(mydata, as.character(Assignee)!= "Unassigned"),table(days))
table(mydata$Updated)
table(mydata$days)
table(mydata$days , mydata$Project)
view(mytable)
View(mytable)
mytable=with(subset(mydata, as.character(Assignee)!= "Unassigned"),table(days,Assignee))
View(mytable)
melt(mytable)
library(reshape)
melt(mytable)
melt(mytable$Assignee)
mytable$Assignee
mytable
as.dataframe(mytable)
as.data.frame(mytable)
write.csv(mytable, file ="table.csv"
write.csv(mytable, file ="table.csv")
write.csv(mytable, file ="table.csv")
read.csv("table.csv", header = T)
thing=read.csv("table.csv", header = T)
thing
thing=read.csv("table.csv")
thing
View(thing)
thing=read.csv("table.csv", col.names = F)
thing=read.csv("table.csv")
View(thing)
write.table(mytable, file ="table.csv")
write.table(mytable, file ="table.csv", sep = ",")
thing=read.csv("table.csv")
View(thing)
data.frame(mytable)
as.data.frame.matrix(mytable)
write.csv(as.data.frame.matrix(mytable))
write.csv(as.data.frame.matrix(mytable),file="table.csv")
thing2=as.data.frame.matrix(mytable)
thing2$Date=colnames(thing2)
thing2$Date=rownames(thing2)
write.csv(thing2)
thing2$Date=rownames(thing2, file="horribleTable.csv")
write.csv(thing2,file="horribleTable.csv")
colnames(thing2)=""
thing2
thing2=as.data.frame.matrix(mytable)
thing2$Date=rownames(thing2 )
rownames(thing2)=""
rownames(thing2)
rownames(thing2)=""
rownames(thing2)
rownames(thing2)=NULL
thing2
write.csv(thing2,file="horribleTable.csv")
pnorm(.8)
data.frame(c(.30, .05,0,.15,.20,.05,.10,.10,.05),nrows=3)
matrix(c(.30, .05,0,.15,.20,.05,.10,.10,.05),nrows=3)
matrix(c(.30, .05,0,.15,.20,.05,.10,.10,.05),nrow=3)
c(100,500,5000)+c(500,1000,5000)
lapply(c(100,500,5000),function(x) x+c(500,1000,5000))
sapply(c(100,500,5000),function(x) x+c(500,1000,5000))
mydata=sapply(c(100,500,5000),function(x) x+c(500,1000,5000))
probs=matrix(c(.30, .05,0,.15,.20,.05,.10,.10,.05),nrow=3)
(mydata-485)*(mydata-1125)*probs
sum((mydata-485)*(mydata-1125)*probs)
mydata
(c(100,500,5000)-485)*(c(500,1000,5000)-1125)
sum((mydata-485)*(mydata-1125)*probs)
(mydata-485)*(mydata-1125)*probs
